#!/usr/bin/env node

/**
 * Script de test pour v√©rifier la connexion √† l'API Gemini
 * Usage: node scripts/test-gemini-api.js
 */

const { GoogleGenerativeAI } = require('@google/generative-ai');
const fs = require('fs');
const path = require('path');

// Couleurs pour la console
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function loadEnvFile() {
  const envPath = path.join(process.cwd(), '.env');
  
  if (!fs.existsSync(envPath)) {
    log('‚ùå Fichier .env non trouv√©', 'red');
    return null;
  }

  const envContent = fs.readFileSync(envPath, 'utf-8');
  const lines = envContent.split('\n');
  
  for (const line of lines) {
    const trimmed = line.trim();
    if (trimmed && !trimmed.startsWith('#')) {
      const [key, ...valueParts] = trimmed.split('=');
      const value = valueParts.join('=').trim();
      if (key && value) {
        process.env[key] = value;
      }
    }
  }
  
  return process.env.NEXT_PUBLIC_GEMINI_API_KEY;
}

async function testGeminiAPI() {
  log('\nüîç Test de l\'API Gemini\n', 'bright');
  log('‚îÅ'.repeat(60), 'cyan');
  
  // √âtape 1: V√©rifier la cl√© API
  log('\nüìã √âtape 1: V√©rification de la cl√© API', 'blue');
  const apiKey = loadEnvFile();
  
  if (!apiKey) {
    log('‚ùå Cl√© API Gemini non trouv√©e dans .env', 'red');
    log('üí° Ajoutez NEXT_PUBLIC_GEMINI_API_KEY=votre_cl√© dans le fichier .env', 'yellow');
    process.exit(1);
  }
  
  log(`‚úÖ Cl√© API trouv√©e: ${apiKey.substring(0, 10)}...`, 'green');
  
  // V√©rifier le format de la cl√©
  if (!apiKey.startsWith('AIza')) {
    log('‚ö†Ô∏è  Format de cl√© API inhabituel (devrait commencer par "AIza")', 'yellow');
  }
  
  if (apiKey.length < 30) {
    log('‚ö†Ô∏è  Cl√© API semble trop courte', 'yellow');
  }
  
  // √âtape 2: Initialiser le client Gemini
  log('\nüìã √âtape 2: Initialisation du client Gemini', 'blue');
  let genAI, model;
  
  try {
    genAI = new GoogleGenerativeAI(apiKey);
    model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });
    log('‚úÖ Client Gemini initialis√© avec le mod√®le gemini-2.5-flash', 'green');
  } catch (error) {
    log(`‚ùå Erreur lors de l'initialisation: ${error.message}`, 'red');
    process.exit(1);
  }
  
  // √âtape 3: Test de g√©n√©ration simple
  log('\nüìã √âtape 3: Test de g√©n√©ration de contenu', 'blue');
  log('Envoi d\'une requ√™te de test...', 'cyan');
  
  const testPrompt = `En tant qu'expert en strat√©gie d'entreprise, donnez 3 conseils concrets pour am√©liorer cette ambition:

Ambition: "Doubler le chiffre d'affaires"
Description: "Passer de 500K‚Ç¨ √† 1M‚Ç¨ de CA annuel"
Secteur: Technology / B2B SaaS

R√©pondez sous forme de liste num√©rot√©e avec des conseils concrets et actionnables.`;

  try {
    const startTime = Date.now();
    const result = await model.generateContent(testPrompt);
    const response = await result.response;
    const text = response.text();
    const duration = Date.now() - startTime;
    
    log(`‚úÖ R√©ponse re√ßue en ${duration}ms`, 'green');
    log('\nüìù R√©ponse de l\'API:', 'bright');
    log('‚îÅ'.repeat(60), 'cyan');
    log(text, 'reset');
    log('‚îÅ'.repeat(60), 'cyan');
    
    // V√©rifications de qualit√©
    log('\nüìä Analyse de la r√©ponse:', 'blue');
    const lines = text.split('\n').filter(line => line.trim());
    log(`  ‚Ä¢ Nombre de lignes: ${lines.length}`, 'cyan');
    log(`  ‚Ä¢ Longueur totale: ${text.length} caract√®res`, 'cyan');
    log(`  ‚Ä¢ Temps de r√©ponse: ${duration}ms`, 'cyan');
    
    if (text.length < 50) {
      log('‚ö†Ô∏è  R√©ponse tr√®s courte, v√©rifiez la qualit√©', 'yellow');
    } else if (text.length > 2000) {
      log('‚ö†Ô∏è  R√©ponse tr√®s longue', 'yellow');
    } else {
      log('‚úÖ Longueur de r√©ponse appropri√©e', 'green');
    }
    
  } catch (error) {
    log(`‚ùå Erreur lors de la g√©n√©ration: ${error.message}`, 'red');
    
    if (error.message.includes('404')) {
      log('\nüí° Suggestions:', 'yellow');
      log('  ‚Ä¢ Le mod√®le "gemini-2.5-flash" n\'est peut-√™tre pas disponible', 'yellow');
      log('  ‚Ä¢ V√©rifiez que votre cl√© API a acc√®s √† ce mod√®le', 'yellow');
      log('  ‚Ä¢ Consultez https://ai.google.dev/gemini-api/docs/models', 'yellow');
    } else if (error.message.includes('API key')) {
      log('\nüí° Suggestions:', 'yellow');
      log('  ‚Ä¢ V√©rifiez que votre cl√© API est valide', 'yellow');
      log('  ‚Ä¢ G√©n√©rez une nouvelle cl√© sur https://aistudio.google.com/app/apikey', 'yellow');
    } else if (error.message.includes('quota')) {
      log('\nüí° Suggestions:', 'yellow');
      log('  ‚Ä¢ Vous avez peut-√™tre d√©pass√© votre quota gratuit', 'yellow');
      log('  ‚Ä¢ V√©rifiez votre utilisation sur Google AI Studio', 'yellow');
    }
    
    process.exit(1);
  }
  
  // √âtape 4: Test de g√©n√©ration avec contexte entreprise
  log('\nüìã √âtape 4: Test avec contexte entreprise', 'blue');
  
  const contextPrompt = `En tant qu'expert pour une startup dans le secteur Technology, donnez 2 conseils pour cette ambition:

Ambition: "Lancer un nouveau produit innovant"
Contexte entreprise:
- Taille: Petite entreprise (10-50 employ√©s)
- Stade: Croissance
- D√©fis: Recrutement, Financement
- March√©: B2B SaaS

R√©pondez de mani√®re concise.`;

  try {
    const startTime = Date.now();
    const result = await model.generateContent(contextPrompt);
    const response = await result.response;
    const text = response.text();
    const duration = Date.now() - startTime;
    
    log(`‚úÖ R√©ponse contextuelle re√ßue en ${duration}ms`, 'green');
    log('\nüìù R√©ponse:', 'bright');
    log('‚îÅ'.repeat(60), 'cyan');
    log(text, 'reset');
    log('‚îÅ'.repeat(60), 'cyan');
    
  } catch (error) {
    log(`‚ùå Erreur lors du test contextuel: ${error.message}`, 'red');
  }
  
  // R√©sum√© final
  log('\n‚úÖ Test termin√© avec succ√®s!', 'green');
  log('\nüìä R√©sum√©:', 'bright');
  log('  ‚úÖ Cl√© API valide et fonctionnelle', 'green');
  log('  ‚úÖ Mod√®le gemini-2.5-flash accessible', 'green');
  log('  ‚úÖ G√©n√©ration de contenu op√©rationnelle', 'green');
  log('  ‚úÖ L\'API Gemini est pr√™te √† √™tre utilis√©e dans OKaRina', 'green');
  
  log('\nüí° Prochaines √©tapes:', 'cyan');
  log('  1. Lancez l\'application: npm run dev', 'cyan');
  log('  2. Cr√©ez une ambition pour tester l\'IA coach', 'cyan');
  log('  3. V√©rifiez les conseils g√©n√©r√©s par l\'IA', 'cyan');
  
  log('\n' + '‚îÅ'.repeat(60), 'cyan');
}

// Ex√©cution du script
testGeminiAPI().catch(error => {
  log(`\n‚ùå Erreur fatale: ${error.message}`, 'red');
  console.error(error);
  process.exit(1);
});

