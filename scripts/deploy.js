#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Configuration
const PROJECT_NAME = 'okarina';
const STAGING_PREFIX = 'recette_';

// Couleurs pour les logs
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function execCommand(command, description) {
  log(`\nüîÑ ${description}...`, 'blue');
  try {
    execSync(command, { stdio: 'inherit' });
    log(`‚úÖ ${description} termin√©`, 'green');
  } catch (error) {
    log(`‚ùå Erreur lors de ${description}`, 'red');
    process.exit(1);
  }
}

function checkPrerequisites() {
  log('üîç V√©rification des pr√©requis...', 'cyan');
  
  // V√©rifier que netlify-cli est install√©
  try {
    execSync('netlify --version', { stdio: 'pipe' });
    log('‚úÖ Netlify CLI install√©', 'green');
  } catch (error) {
    log('‚ùå Netlify CLI non install√©', 'red');
    log('üí° Installez-le avec: npm install -g netlify-cli', 'yellow');
    process.exit(1);
  }
  
  // V√©rifier que nous sommes dans un projet git
  if (!fs.existsSync('.git')) {
    log('‚ùå Ce n\'est pas un d√©p√¥t Git', 'red');
    log('üí° Initialisez Git avec: git init', 'yellow');
    process.exit(1);
  }
  
  // V√©rifier que le build fonctionne
  log('üèóÔ∏è  Test du build...', 'blue');
  try {
    execSync('npm run build', { stdio: 'pipe' });
    log('‚úÖ Build r√©ussi', 'green');
  } catch (error) {
    log('‚ùå Erreur lors du build', 'red');
    log('üí° Corrigez les erreurs de build avant de d√©ployer', 'yellow');
    process.exit(1);
  }
}

function deployToStaging() {
  log('\nüöÄ D√©ploiement en recette...', 'magenta');
  
  const siteName = `${STAGING_PREFIX}${PROJECT_NAME}`;
  
  // Cr√©er le site s'il n'existe pas
  try {
    execSync(`netlify sites:list | grep ${siteName}`, { stdio: 'pipe' });
    log(`‚úÖ Site ${siteName} existe d√©j√†`, 'green');
  } catch (error) {
    log(`üÜï Cr√©ation du site ${siteName}...`, 'blue');
    execCommand(`netlify sites:create --name ${siteName}`, 'Cr√©ation du site');
  }
  
  // D√©ployer
  execCommand(
    `netlify deploy --prod --site ${siteName}`,
    'D√©ploiement en recette'
  );
  
  log(`\nüéâ D√©ploiement en recette termin√© !`, 'green');
  log(`üåê URL: https://${siteName}.netlify.app`, 'cyan');
}

function deployToProduction() {
  log('\nüöÄ D√©ploiement en production...', 'magenta');
  
  // V√©rifier que nous sommes sur la branche main/master
  try {
    const branch = execSync('git branch --show-current', { encoding: 'utf8' }).trim();
    if (branch !== 'main' && branch !== 'master') {
      log(`‚ö†Ô∏è  Vous √™tes sur la branche '${branch}'`, 'yellow');
      log('üí° Il est recommand√© de d√©ployer depuis main/master', 'yellow');
    }
  } catch (error) {
    log('‚ö†Ô∏è  Impossible de d√©terminer la branche courante', 'yellow');
  }
  
  // Cr√©er le site s'il n'existe pas
  try {
    execSync(`netlify sites:list | grep ${PROJECT_NAME}`, { stdio: 'pipe' });
    log(`‚úÖ Site ${PROJECT_NAME} existe d√©j√†`, 'green');
  } catch (error) {
    log(`üÜï Cr√©ation du site ${PROJECT_NAME}...`, 'blue');
    execCommand(`netlify sites:create --name ${PROJECT_NAME}`, 'Cr√©ation du site');
  }
  
  // D√©ployer
  execCommand(
    `netlify deploy --prod --site ${PROJECT_NAME}`,
    'D√©ploiement en production'
  );
  
  log(`\nüéâ D√©ploiement en production termin√© !`, 'green');
  log(`üåê URL: https://${PROJECT_NAME}.netlify.app`, 'cyan');
}

function showHelp() {
  log('\nüìñ Script de d√©ploiement OKaRina', 'bright');
  log('\nUsage:', 'cyan');
  log('  node scripts/deploy.js [command]', 'white');
  log('\nCommandes disponibles:', 'cyan');
  log('  staging     D√©ployer en environnement de recette', 'white');
  log('  production  D√©ployer en production', 'white');
  log('  help        Afficher cette aide', 'white');
  log('\nExemples:', 'cyan');
  log('  node scripts/deploy.js staging', 'white');
  log('  node scripts/deploy.js production', 'white');
}

// Point d'entr√©e principal
function main() {
  const command = process.argv[2];
  
  log('üéØ Script de d√©ploiement OKaRina', 'bright');
  
  switch (command) {
    case 'staging':
    case 'recette':
      checkPrerequisites();
      deployToStaging();
      break;
      
    case 'production':
    case 'prod':
      checkPrerequisites();
      deployToProduction();
      break;
      
    case 'help':
    case '--help':
    case '-h':
      showHelp();
      break;
      
    default:
      log('‚ùå Commande non reconnue', 'red');
      showHelp();
      process.exit(1);
  }
}

// Gestion des erreurs non captur√©es
process.on('uncaughtException', (error) => {
  log(`‚ùå Erreur non captur√©e: ${error.message}`, 'red');
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  log(`‚ùå Promesse rejet√©e: ${reason}`, 'red');
  process.exit(1);
});

// Lancer le script
main();
