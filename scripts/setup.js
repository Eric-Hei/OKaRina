#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üéØ Configuration d\'OKaRina...\n');

// V√©rifier que nous sommes dans le bon r√©pertoire
const packageJsonPath = path.join(process.cwd(), 'package.json');
if (!fs.existsSync(packageJsonPath)) {
  console.error('‚ùå Erreur: package.json non trouv√©. Assurez-vous d\'√™tre dans le r√©pertoire racine du projet.');
  process.exit(1);
}

// Lire le package.json
const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));

console.log(`üì¶ Projet: ${packageJson.name}`);
console.log(`üìù Version: ${packageJson.version}`);
console.log(`üìÑ Description: ${packageJson.description}\n`);

// V√©rifier les d√©pendances critiques
const criticalDeps = [
  'next',
  'react',
  'typescript',
  'tailwindcss',
  'zustand',
  'framer-motion'
];

console.log('üîç V√©rification des d√©pendances critiques...');
const missingDeps = [];

criticalDeps.forEach(dep => {
  if (!packageJson.dependencies?.[dep] && !packageJson.devDependencies?.[dep]) {
    missingDeps.push(dep);
  } else {
    console.log(`‚úÖ ${dep}`);
  }
});

if (missingDeps.length > 0) {
  console.log('\n‚ùå D√©pendances manquantes:');
  missingDeps.forEach(dep => console.log(`   - ${dep}`));
  console.log('\nüí° Installez les d√©pendances manquantes avec:');
  console.log(`   npm install ${missingDeps.join(' ')}`);
  process.exit(1);
}

// V√©rifier la structure des dossiers
console.log('\nüìÅ V√©rification de la structure des dossiers...');
const requiredDirs = [
  'src',
  'src/components',
  'src/pages',
  'src/services',
  'src/store',
  'src/types',
  'src/utils',
  'src/constants',
  'src/hooks',
  'src/styles'
];

requiredDirs.forEach(dir => {
  const dirPath = path.join(process.cwd(), dir);
  if (fs.existsSync(dirPath)) {
    console.log(`‚úÖ ${dir}/`);
  } else {
    console.log(`‚ùå ${dir}/ (manquant)`);
  }
});

// V√©rifier les fichiers de configuration
console.log('\n‚öôÔ∏è  V√©rification des fichiers de configuration...');
const configFiles = [
  'tailwind.config.js',
  'next.config.js',
  'tsconfig.json',
  'jest.config.js',
  'jest.setup.js'
];

configFiles.forEach(file => {
  const filePath = path.join(process.cwd(), file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} (manquant)`);
  }
});

// Cr√©er le fichier .env.local s'il n'existe pas
const envPath = path.join(process.cwd(), '.env.local');
if (!fs.existsSync(envPath)) {
  console.log('\nüîß Cr√©ation du fichier .env.local...');
  const envContent = `# Configuration locale pour OKaRina
NEXT_PUBLIC_APP_NAME=OKaRina
NEXT_PUBLIC_APP_VERSION=${packageJson.version}
NEXT_PUBLIC_APP_ENV=development

# Configuration de l'IA (pour future int√©gration)
# OPENAI_API_KEY=your_openai_api_key_here

# Configuration de la base de donn√©es (pour future int√©gration)
# DATABASE_URL=your_database_url_here

# Configuration de l'authentification (pour future int√©gration)
# NEXTAUTH_SECRET=your_nextauth_secret_here
# NEXTAUTH_URL=http://localhost:3000
`;
  
  fs.writeFileSync(envPath, envContent);
  console.log('‚úÖ .env.local cr√©√©');
}

// Cr√©er le dossier public s'il n'existe pas
const publicPath = path.join(process.cwd(), 'public');
if (!fs.existsSync(publicPath)) {
  console.log('\nüìÅ Cr√©ation du dossier public...');
  fs.mkdirSync(publicPath);
  console.log('‚úÖ public/ cr√©√©');
}

// Cr√©er un favicon simple
const faviconPath = path.join(publicPath, 'favicon.ico');
if (!fs.existsSync(faviconPath)) {
  console.log('üé® Cr√©ation d\'un favicon temporaire...');
  // Cr√©er un fichier favicon vide (sera remplac√© par un vrai favicon plus tard)
  fs.writeFileSync(faviconPath, '');
  console.log('‚úÖ favicon.ico cr√©√© (temporaire)');
}

console.log('\nüéâ Configuration termin√©e !');
console.log('\nüìã Prochaines √©tapes:');
console.log('   1. npm run dev     - D√©marrer le serveur de d√©veloppement');
console.log('   2. npm run test    - Lancer les tests');
console.log('   3. npm run build   - Construire pour la production');
console.log('\nüåê L\'application sera disponible sur http://localhost:3000');
console.log('\nüí° Consultez le README.md pour plus d\'informations.');
