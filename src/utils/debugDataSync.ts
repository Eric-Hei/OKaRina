/**
 * Utilitaires de d√©bogage pour la synchronisation des donn√©es
 * Utilisables depuis la console du navigateur
 */

import { storageService } from '@/services/storage';

/**
 * Affiche l'√©tat actuel de la synchronisation des donn√©es
 * Usage: debugDataSync() dans la console
 */
export function debugDataSync() {
  if (typeof window === 'undefined') {
    console.warn('‚ö†Ô∏è Cette fonction ne peut √™tre utilis√©e que c√¥t√© client');
    return;
  }

  console.log('\nüîç √âtat de la synchronisation des donn√©es\n');
  console.log('‚îÅ'.repeat(80));

  const data = {
    ambitions: storageService.getAmbitions(),
    keyResults: storageService.getKeyResults(),
    okrs: storageService.getOKRs(),
    actions: storageService.getActions(),
    quarterlyObjectives: storageService.getQuarterlyObjectives(),
    quarterlyKeyResults: storageService.getQuarterlyKeyResults(),
  };

  console.table({
    'Ambitions': { count: data.ambitions.length },
    'R√©sultats Cl√©s': { count: data.keyResults.length },
    'OKRs': { count: data.okrs.length },
    'Objectifs Trimestriels': { count: data.quarterlyObjectives.length },
    'R√©sultats Cl√©s Trimestriels': { count: data.quarterlyKeyResults.length },
    'Actions': { count: data.actions.length },
  });

  console.log('\nüìä D√©tails des donn√©es:\n');
  console.log('Ambitions:', data.ambitions);
  console.log('R√©sultats Cl√©s:', data.keyResults);
  console.log('OKRs:', data.okrs);
  console.log('Objectifs Trimestriels:', data.quarterlyObjectives);
  console.log('R√©sultats Cl√©s Trimestriels:', data.quarterlyKeyResults);
  console.log('Actions:', data.actions);

  console.log('\n‚îÅ'.repeat(80));
  console.log('üí° Commandes disponibles:');
  console.log('  - debugDataSync()        : Afficher cet √©tat');
  console.log('  - clearAllData()         : Vider toutes les donn√©es');
  console.log('  - exportData()           : Exporter les donn√©es en JSON');
  console.log('‚îÅ'.repeat(80) + '\n');
}

/**
 * Vide toutes les donn√©es du localStorage
 * Usage: clearAllData() dans la console
 */
export function clearAllData() {
  if (typeof window === 'undefined') {
    console.warn('‚ö†Ô∏è Cette fonction ne peut √™tre utilis√©e que c√¥t√© client');
    return;
  }

  if (confirm('‚ö†Ô∏è √ätes-vous s√ªr de vouloir vider toutes les donn√©es ? Cette action est irr√©versible.')) {
    localStorage.clear();
    console.log('‚úÖ Toutes les donn√©es ont √©t√© supprim√©es');
    console.log('üîÑ Rechargez la page pour voir les changements');
  } else {
    console.log('‚ùå Op√©ration annul√©e');
  }
}

/**
 * Exporte toutes les donn√©es en JSON
 * Usage: exportData() dans la console
 */
export function exportData() {
  if (typeof window === 'undefined') {
    console.warn('‚ö†Ô∏è Cette fonction ne peut √™tre utilis√©e que c√¥t√© client');
    return;
  }

  const data = {
    ambitions: storageService.getAmbitions(),
    keyResults: storageService.getKeyResults(),
    okrs: storageService.getOKRs(),
    actions: storageService.getActions(),
    quarterlyObjectives: storageService.getQuarterlyObjectives(),
    quarterlyKeyResults: storageService.getQuarterlyKeyResults(),
    user: storageService.getUser(),
    exportedAt: new Date().toISOString(),
  };

  const json = JSON.stringify(data, null, 2);
  console.log('üì¶ Donn√©es export√©es:\n');
  console.log(json);
  console.log('\nüíæ Copier le JSON ci-dessus pour sauvegarder vos donn√©es');

  return data;
}

// Exposer les fonctions globalement pour faciliter le d√©bogage
if (typeof window !== 'undefined') {
  (window as any).debugDataSync = debugDataSync;
  (window as any).clearAllData = clearAllData;
  (window as any).exportData = exportData;
  
  console.log('üêõ Fonctions de d√©bogage disponibles:');
  console.log('  - debugDataSync()');
  console.log('  - clearAllData()');
  console.log('  - exportData()');
}

