import { AI_MESSAGES } from '@/constants';
import { geminiService } from './gemini';
import type {
  Ambition,
  KeyResult,
  OKR,
  Action,
  Task,
  AIValidation,
  SmartAnalysis,
  CompanyProfile,
  User,
} from '@/types';
import { ValidationCategory, AmbitionCategory, CompanySize, CompanyStage } from '@/types';

// Service IA Coach - Simulation d'intelligence artificielle
export class AICoachService {
  private static instance: AICoachService;

  private constructor() {}

  public static getInstance(): AICoachService {
    if (!AICoachService.instance) {
      AICoachService.instance = new AICoachService();
    }
    return AICoachService.instance;
  }

  // Validation des ambitions avec contexte entreprise et IA Gemini
  public async validateAmbitionAsync(ambition: Partial<Ambition>, companyProfile?: CompanyProfile): Promise<AIValidation> {
    const suggestions: string[] = [];
    const warnings: string[] = [];
    let confidence = 100;

    // Validations de base
    if (!ambition.title || ambition.title.length < 10) {
      suggestions.push("Le titre de l'ambition devrait √™tre plus descriptif (minimum 10 caract√®res)");
      confidence -= 20;
    }

    if (!ambition.description || ambition.description.length < 20) {
      suggestions.push("Ajoutez une description plus d√©taill√©e de votre ambition");
      confidence -= 15;
    }

    if (ambition.title && ambition.title.length > 100) {
      warnings.push("Le titre est peut-√™tre trop long. Essayez d'√™tre plus concis.");
      confidence -= 10;
    }

    // Analyse du contenu
    const title = ambition.title?.toLowerCase() || '';

    if (!this.containsActionVerb(title)) {
      suggestions.push("Utilisez un verbe d'action pour rendre votre ambition plus dynamique");
      confidence -= 15;
    }

    if (!this.containsQuantifiableElement(title)) {
      suggestions.push("Essayez d'inclure un √©l√©ment quantifiable dans votre ambition");
      confidence -= 10;
    }

    // Suggestions IA avec Gemini
    try {
      const aiSuggestions = await geminiService.generateAmbitionAdvice(ambition, companyProfile);
      suggestions.push(...aiSuggestions.map(s => `ü§ñ ${s}`));
      confidence += 10; // Bonus pour les conseils IA
    } catch (error) {
      console.warn('Erreur lors de la g√©n√©ration des conseils IA:', error);
      // Fallback vers les suggestions contextuelles
      if (companyProfile) {
        const contextualSuggestions = this.getContextualSuggestions(ambition, companyProfile);
        suggestions.push(...contextualSuggestions);
      } else {
        suggestions.push("üí° Compl√©tez votre profil d'entreprise pour des conseils personnalis√©s");
      }
    }

    const isValid = confidence >= 70;

    return {
      isValid,
      confidence: Math.min(confidence, 100),
      suggestions,
      warnings,
      category: ValidationCategory.AMBITION,
      validatedAt: new Date(),
    };
  }

  // Version synchrone pour la compatibilit√© avec le store existant
  public validateAmbition(ambition: Partial<Ambition>, companyProfile?: CompanyProfile): AIValidation {
    const suggestions: string[] = [];
    const warnings: string[] = [];
    let confidence = 100;

    // Validations de base
    if (!ambition.title || ambition.title.length < 10) {
      suggestions.push("Le titre de l'ambition devrait √™tre plus descriptif (minimum 10 caract√®res)");
      confidence -= 20;
    }

    if (!ambition.description || ambition.description.length < 20) {
      suggestions.push("Ajoutez une description plus d√©taill√©e de votre ambition");
      confidence -= 15;
    }

    if (ambition.title && ambition.title.length > 100) {
      warnings.push("Le titre est peut-√™tre trop long. Essayez d'√™tre plus concis.");
      confidence -= 10;
    }

    // Analyse du contenu
    const title = ambition.title?.toLowerCase() || '';

    if (!this.containsActionVerb(title)) {
      suggestions.push("Utilisez un verbe d'action pour rendre votre ambition plus dynamique");
      confidence -= 15;
    }

    if (!this.containsQuantifiableElement(title)) {
      suggestions.push("Essayez d'inclure un √©l√©ment quantifiable dans votre ambition");
      confidence -= 10;
    }

    // Suggestions contextuelles bas√©es sur l'entreprise
    if (companyProfile) {
      const contextualSuggestions = this.getContextualSuggestions(ambition, companyProfile);
      suggestions.push(...contextualSuggestions);
    } else {
      suggestions.push("üí° Compl√©tez votre profil d'entreprise pour des conseils personnalis√©s");
    }

    const isValid = confidence >= 70;

    return {
      isValid,
      confidence,
      suggestions,
      warnings,
      category: ValidationCategory.AMBITION,
      validatedAt: new Date(),
    };
  }

  // Validation des r√©sultats cl√©s avec analyse SMART et IA
  public async validateKeyResultAsync(keyResult: Partial<KeyResult>, companyProfile?: CompanyProfile): Promise<AIValidation & { smartAnalysis: SmartAnalysis }> {
    const suggestions: string[] = [];
    const warnings: string[] = [];
    let confidence = 100;

    // Analyse SMART
    const smartAnalysis = this.analyzeSmartCriteria(keyResult);

    if (!smartAnalysis.specific) {
      suggestions.push("Soyez plus sp√©cifique sur ce que vous voulez accomplir");
      confidence -= 20;
    }

    if (!smartAnalysis.measurable) {
      suggestions.push("Ajoutez des m√©triques pr√©cises pour mesurer le succ√®s");
      confidence -= 25;
    }

    if (!smartAnalysis.timeBound) {
      suggestions.push("D√©finissez une date limite claire");
      confidence -= 20;
    }

    if (!smartAnalysis.achievable) {
      warnings.push("Cet objectif semble tr√®s ambitieux. Assurez-vous qu'il soit atteignable");
      confidence -= 15;
    }

    if (!smartAnalysis.relevant) {
      suggestions.push("V√©rifiez que ce r√©sultat cl√© est bien align√© avec votre ambition");
      confidence -= 10;
    }

    // Suggestions IA avec Gemini
    try {
      const aiSuggestions = await geminiService.generateKeyResultAdvice(keyResult, companyProfile);
      suggestions.push(...aiSuggestions.map(s => `ü§ñ ${s}`));
      confidence += 5; // Petit bonus pour les conseils IA
    } catch (error) {
      console.warn('Erreur lors de la g√©n√©ration des conseils IA pour le r√©sultat cl√©:', error);
    }

    const isValid = confidence >= 70 && smartAnalysis.score >= 60;

    return {
      isValid,
      confidence: Math.min(confidence, 100),
      suggestions,
      warnings,
      category: ValidationCategory.KEY_RESULT,
      validatedAt: new Date(),
      smartAnalysis,
    };
  }

  // Version synchrone pour la compatibilit√© avec le store existant
  public validateKeyResult(keyResult: Partial<KeyResult>): AIValidation & { smartAnalysis: SmartAnalysis } {
    const suggestions: string[] = [];
    const warnings: string[] = [];
    let confidence = 100;

    // Analyse SMART
    const smartAnalysis = this.analyzeSmartCriteria(keyResult);

    if (!smartAnalysis.specific) {
      suggestions.push("Soyez plus sp√©cifique sur ce que vous voulez accomplir");
      confidence -= 20;
    }

    if (!smartAnalysis.measurable) {
      suggestions.push("Ajoutez des m√©triques pr√©cises pour mesurer le succ√®s");
      confidence -= 25;
    }

    if (!smartAnalysis.timeBound) {
      suggestions.push("D√©finissez une date limite claire");
      confidence -= 20;
    }

    if (!smartAnalysis.achievable) {
      warnings.push("Cet objectif semble tr√®s ambitieux. Assurez-vous qu'il soit atteignable");
      confidence -= 15;
    }

    if (!smartAnalysis.relevant) {
      suggestions.push("V√©rifiez que ce r√©sultat cl√© est bien align√© avec votre ambition");
      confidence -= 10;
    }

    const isValid = confidence >= 70 && smartAnalysis.score >= 60;

    return {
      isValid,
      confidence,
      suggestions,
      warnings,
      category: ValidationCategory.KEY_RESULT,
      validatedAt: new Date(),
      smartAnalysis,
    };
  }

  // Validation des OKRs
  public validateOKR(okr: Partial<OKR>): AIValidation {
    const suggestions: string[] = [];
    const warnings: string[] = [];
    let confidence = 100;

    if (!okr.objective || okr.objective.length < 15) {
      suggestions.push("L'objectif devrait √™tre plus d√©taill√© et inspirant");
      confidence -= 20;
    }

    if (!okr.keyResults || okr.keyResults.length === 0) {
      suggestions.push("Ajoutez au moins un r√©sultat cl√© mesurable");
      confidence -= 30;
    }

    if (okr.keyResults && okr.keyResults.length > 5) {
      warnings.push("Limitez-vous √† 3-5 r√©sultats cl√©s pour rester focus");
      confidence -= 15;
    }

    // V√©rification de la coh√©rence des poids
    if (okr.keyResults) {
      const totalWeight = okr.keyResults.reduce((sum, kr) => sum + kr.weight, 0);
      if (Math.abs(totalWeight - 100) > 5) {
        suggestions.push("La somme des poids des r√©sultats cl√©s devrait √™tre proche de 100%");
        confidence -= 10;
      }
    }

    const isValid = confidence >= 70;

    return {
      isValid,
      confidence,
      suggestions,
      warnings,
      category: ValidationCategory.OBJECTIVE,
      validatedAt: new Date(),
    };
  }

  // Validation des actions
  public validateAction(action: Partial<Action>): AIValidation {
    const suggestions: string[] = [];
    const warnings: string[] = [];
    let confidence = 100;

    if (!action.title || action.title.length < 5) {
      suggestions.push("Le titre de l'action devrait √™tre plus descriptif");
      confidence -= 20;
    }

    if (!action.deadline) {
      suggestions.push("D√©finissez une date limite pour cette action");
      confidence -= 25;
    }

    if (action.deadline && new Date(action.deadline) < new Date()) {
      warnings.push("La date limite est dans le pass√©");
      confidence -= 30;
    }

    if (!action.description || action.description.length < 10) {
      suggestions.push("Ajoutez une description plus d√©taill√©e de l'action");
      confidence -= 15;
    }

    const isValid = confidence >= 70;

    return {
      isValid,
      confidence,
      suggestions,
      warnings,
      category: ValidationCategory.ACTION,
      validatedAt: new Date(),
    };
  }

  // Analyse SMART des r√©sultats cl√©s
  private analyzeSmartCriteria(keyResult: Partial<KeyResult>): SmartAnalysis {
    let score = 0;
    const recommendations: string[] = [];

    // Specific
    const specific = !!(keyResult.title && keyResult.title.length >= 10 && keyResult.description);
    if (specific) score += 20;
    else recommendations.push("Soyez plus sp√©cifique dans la description");

    // Measurable
    const measurable = !!(keyResult.targetValue && keyResult.unit);
    if (measurable) score += 20;
    else recommendations.push("Ajoutez une valeur cible et une unit√© de mesure");

    // Achievable
    const achievable = keyResult.targetValue ? keyResult.targetValue > 0 && keyResult.targetValue < 1000000 : false;
    if (achievable) score += 20;
    else recommendations.push("V√©rifiez que l'objectif est r√©aliste et atteignable");

    // Relevant
    const relevant = !!(keyResult.title && keyResult.description);
    if (relevant) score += 20;
    else recommendations.push("Assurez-vous que ce r√©sultat cl√© est pertinent");

    // Time-bound
    const timeBound = !!(keyResult.deadline && new Date(keyResult.deadline) > new Date());
    if (timeBound) score += 20;
    else recommendations.push("D√©finissez une √©ch√©ance claire dans le futur");

    return {
      specific,
      measurable,
      achievable,
      relevant,
      timeBound,
      score,
      recommendations,
    };
  }

  // G√©n√©ration de suggestions personnalis√©es
  public generateSuggestions(category: AmbitionCategory, context: string): string[] {
    const suggestions: string[] = [];

    switch (category) {
      case AmbitionCategory.REVENUE:
        suggestions.push(
          "Consid√©rez diversifier vos sources de revenus",
          "Analysez votre pricing pour optimiser la rentabilit√©",
          "Identifiez vos clients les plus profitables"
        );
        break;
      
      case AmbitionCategory.GROWTH:
        suggestions.push(
          "D√©finissez vos m√©triques de croissance cl√©s",
          "Analysez votre march√© cible et la concurrence",
          "Planifiez votre strat√©gie d'acquisition client"
        );
        break;
      
      case AmbitionCategory.PRODUCT:
        suggestions.push(
          "Recueillez les feedbacks utilisateurs r√©guli√®rement",
          "Priorisez les fonctionnalit√©s selon la valeur business",
          "Testez vos hypoth√®ses avec des MVP"
        );
        break;
      
      case AmbitionCategory.TEAM:
        suggestions.push(
          "D√©finissez clairement les r√¥les et responsabilit√©s",
          "Investissez dans la formation et le d√©veloppement",
          "Cr√©ez une culture d'entreprise forte"
        );
        break;
      
      default:
        suggestions.push(
          "D√©composez votre ambition en √©tapes concr√®tes",
          "Identifiez les ressources n√©cessaires",
          "Planifiez des points de contr√¥le r√©guliers"
        );
    }

    return suggestions;
  }

  // Messages d'encouragement bas√©s sur les progr√®s
  public getProgressMessage(progressPercentage: number): string {
    if (progressPercentage >= 90) {
      return AI_MESSAGES.PROGRESS_ENCOURAGEMENT[0];
    } else if (progressPercentage >= 70) {
      return AI_MESSAGES.PROGRESS_ENCOURAGEMENT[1];
    } else if (progressPercentage >= 50) {
      return AI_MESSAGES.PROGRESS_ENCOURAGEMENT[2];
    } else if (progressPercentage >= 30) {
      return AI_MESSAGES.PROGRESS_CONCERN[0];
    } else {
      return AI_MESSAGES.PROGRESS_CONCERN[1];
    }
  }

  // D√©tection de verbes d'action
  private containsActionVerb(text: string): boolean {
    const actionVerbs = [
      'augmenter', 'd√©velopper', 'cr√©er', 'lancer', 'am√©liorer', 'optimiser',
      'atteindre', 'r√©aliser', 'construire', '√©tablir', 'g√©n√©rer', 'produire',
      'doubler', 'tripler', 'r√©duire', 'minimiser', 'maximiser', 'conqu√©rir'
    ];
    
    return actionVerbs.some(verb => text.includes(verb));
  }

  // D√©tection d'√©l√©ments quantifiables
  private containsQuantifiableElement(text: string): boolean {
    const quantifiablePatterns = [
      /\d+/,  // Nombres
      /%/,    // Pourcentages
      /‚Ç¨|dollar|\$/,  // Monnaies
      /million|millier|k‚Ç¨|k\$/,  // Ordres de grandeur
    ];
    
    return quantifiablePatterns.some(pattern => pattern.test(text));
  }

  // Analyse de sentiment (simulation)
  public analyzeSentiment(text: string): 'positive' | 'neutral' | 'negative' {
    const positiveWords = ['excellent', 'parfait', 'g√©nial', 'super', 'formidable', 'r√©ussir', 'succ√®s'];
    const negativeWords = ['difficile', 'probl√®me', '√©chec', 'impossible', 'dur', 'compliqu√©'];

    const lowerText = text.toLowerCase();
    const positiveCount = positiveWords.filter(word => lowerText.includes(word)).length;
    const negativeCount = negativeWords.filter(word => lowerText.includes(word)).length;

    if (positiveCount > negativeCount) return 'positive';
    if (negativeCount > positiveCount) return 'negative';
    return 'neutral';
  }

  // G√©n√©ration de questions contextuelles sur la soci√©t√© avec IA
  public async generateCompanyQuestions(user: User): Promise<string[]> {
    try {
      const aiQuestions = await geminiService.generateCompanyQuestions(user.companyProfile);
      return aiQuestions;
    } catch (error) {
      console.warn('Erreur lors de la g√©n√©ration des questions IA:', error);
      // Fallback vers les questions statiques
      return this.getFallbackCompanyQuestions(user);
    }
  }

  // Questions de fallback si l'IA n'est pas disponible
  private getFallbackCompanyQuestions(user: User): string[] {
    const questions: string[] = [];

    if (!user.companyProfile) {
      return [
        "Pouvez-vous me parler de votre entreprise ? Dans quel secteur √©voluez-vous ?",
        "Quelle est la taille de votre √©quipe actuellement ?",
        "√Ä quel stade de d√©veloppement se trouve votre entreprise ?",
        "Quels sont vos principaux d√©fis business actuels ?",
        "Quel est votre march√© cible principal ?"
      ];
    }

    const profile = user.companyProfile;

    // Questions contextuelles bas√©es sur le profil existant
    if (profile.stage === CompanyStage.EARLY_STAGE) {
      questions.push("En tant qu'entreprise en phase de d√©marrage, quels sont vos objectifs de croissance prioritaires ?");
    }

    if (profile.size === CompanySize.STARTUP) {
      questions.push("Comment envisagez-vous de faire √©voluer votre √©quipe cette ann√©e ?");
    }

    if (profile.mainChallenges.length === 0) {
      questions.push("Quels sont les principaux obstacles que vous rencontrez actuellement ?");
    }

    return questions.length > 0 ? questions : [
      "Quels sont vos objectifs de croissance pour les 12 prochains mois ?",
      "Quels obstacles rencontrez-vous le plus fr√©quemment ?",
      "Comment mesurez-vous actuellement votre succ√®s ?"
    ];
  }

  // Suggestions personnalis√©es bas√©es sur le profil de l'entreprise
  public getContextualSuggestions(ambition: Partial<Ambition>, companyProfile?: CompanyProfile): string[] {
    const suggestions: string[] = [];

    if (!companyProfile) {
      suggestions.push("üí° Compl√©tez votre profil d'entreprise pour des conseils plus personnalis√©s");
      return suggestions;
    }

    // Suggestions bas√©es sur la taille de l'entreprise
    if (companyProfile.size === CompanySize.STARTUP && ambition.category === AmbitionCategory.REVENUE) {
      suggestions.push("üöÄ Pour une startup, concentrez-vous sur la validation du march√© avant l'optimisation des revenus");
    }

    if (companyProfile.size === CompanySize.MEDIUM && ambition.category === AmbitionCategory.TEAM) {
      suggestions.push("üë• √Ä votre taille, pensez √† structurer vos processus RH et de management");
    }

    // Suggestions bas√©es sur le secteur
    if (companyProfile.industry.toLowerCase().includes('tech') && ambition.category === AmbitionCategory.PRODUCT) {
      suggestions.push("üíª Dans le secteur tech, int√©grez des m√©triques d'adoption utilisateur dans vos objectifs produit");
    }

    // Suggestions bas√©es sur les d√©fis
    if (companyProfile.mainChallenges.includes('acquisition client') && ambition.category === AmbitionCategory.MARKET) {
      suggestions.push("üéØ Vu vos d√©fis d'acquisition, d√©finissez des objectifs pr√©cis sur vos canaux de conversion");
    }

    return suggestions;
  }

  // Validation d'un profil d'entreprise
  public validateCompanyProfile(profile: Partial<CompanyProfile>): AIValidation {
    const suggestions: string[] = [];
    const warnings: string[] = [];
    let confidence = 100;

    if (!profile.name || profile.name.length < 2) {
      suggestions.push("Pr√©cisez le nom de votre entreprise");
      confidence -= 20;
    }

    if (!profile.industry || profile.industry.length < 3) {
      suggestions.push("D√©crivez votre secteur d'activit√©");
      confidence -= 25;
    }

    if (!profile.targetMarket || profile.targetMarket.length < 10) {
      suggestions.push("D√©finissez plus pr√©cis√©ment votre march√© cible");
      confidence -= 20;
    }

    if (!profile.mainChallenges || profile.mainChallenges.length === 0) {
      suggestions.push("Identifiez vos principaux d√©fis business pour des conseils plus pertinents");
      confidence -= 15;
    }

    if (profile.mainChallenges && profile.mainChallenges.length > 5) {
      warnings.push("Limitez-vous √† 3-5 d√©fis principaux pour rester focus");
      confidence -= 10;
    }

    const isValid = confidence >= 70;

    return {
      isValid,
      confidence,
      suggestions,
      warnings,
      category: ValidationCategory.AMBITION, // R√©utilisation de la cat√©gorie existante
      validatedAt: new Date(),
    };
  }
}

// Instance singleton
export const aiCoachService = AICoachService.getInstance();
