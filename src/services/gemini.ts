import { GoogleGenerativeAI } from '@google/generative-ai';
import type { CompanyProfile, Ambition, KeyResult } from '@/types';

// Service Gemini AI pour des conseils intelligents
export class GeminiService {
  private static instance: GeminiService;
  private genAI?: GoogleGenerativeAI;
  private model?: any;

  private constructor() {
    // R√©cup√©ration s√©curis√©e de la cl√© API depuis les variables d'environnement
    const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
    if (!apiKey || apiKey === 'your_gemini_api_key_here') {
      console.warn('‚ö†Ô∏è Cl√© API Gemini non configur√©e. Utilisation du mode simulation.');
      console.warn('üí° Pour activer l\'IA, ajoutez NEXT_PUBLIC_GEMINI_API_KEY dans votre fichier .env.local');
      return;
    }

    try {
      this.genAI = new GoogleGenerativeAI(apiKey);
      // Utiliser Gemini 2.0 Flash (le plus r√©cent et rapide)
      // Autres options: 'gemini-2.0-flash-exp', 'gemini-exp-1206'
      const modelName = process.env.NEXT_PUBLIC_GEMINI_MODEL || 'gemini-2.0-flash-exp';
      this.model = this.genAI.getGenerativeModel({ model: modelName });
      console.log(`‚úÖ Gemini AI initialis√© avec succ√®s (mod√®le: ${modelName})`);
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation de Gemini:', error);
      console.warn('‚ö†Ô∏è Utilisation du mode simulation.');
    }
  }

  public static getInstance(): GeminiService {
    if (!GeminiService.instance) {
      GeminiService.instance = new GeminiService();
    }
    return GeminiService.instance;
  }

  // V√©rifier si l'API est disponible
  public isAvailable(): boolean {
    return !!this.model;
  }

  // G√©n√©rer des conseils pour une ambition
  public async generateAmbitionAdvice(
    ambition: Partial<Ambition>,
    companyProfile?: CompanyProfile
  ): Promise<string[]> {
    if (!this.isAvailable()) {
      throw new Error('L\'API Gemini n\'est pas configur√©e. Veuillez ajouter votre cl√© API dans le fichier .env.local');
    }

    try {
      const prompt = this.buildAmbitionPrompt(ambition, companyProfile);
      console.log('ü§ñ Appel √† Gemini AI pour validation de l\'ambition...');
      console.log('üìù Prompt envoy√© √† Gemini:', prompt);
      console.log('üè¢ Profil entreprise:', companyProfile);

      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      console.log('‚úÖ R√©ponse Gemini re√ßue:', text);

      // Parser la r√©ponse pour extraire les conseils
      return this.parseAdviceResponse(text);
    } catch (error: any) {
      console.error('‚ùå Erreur Gemini API:', error?.message || error);

      // Message d'erreur clair selon le type d'erreur
      if (error?.message?.includes('404') || error?.message?.includes('not found')) {
        throw new Error('Le mod√®le Gemini AI n\'est pas disponible. Veuillez v√©rifier votre configuration API.');
      } else if (error?.message?.includes('API key')) {
        throw new Error('Cl√© API Gemini invalide. Veuillez v√©rifier votre configuration.');
      } else {
        throw new Error(`Erreur lors de l'appel √† l'API Gemini : ${error?.message || 'Erreur inconnue'}`);
      }
    }
  }

  // G√©n√©rer des conseils pour un r√©sultat cl√©
  public async generateKeyResultAdvice(
    keyResult: Partial<KeyResult>,
    companyProfile?: CompanyProfile
  ): Promise<string[]> {
    if (!this.isAvailable()) {
      throw new Error('L\'API Gemini n\'est pas configur√©e. Veuillez ajouter votre cl√© API dans le fichier .env.local');
    }

    try {
      const prompt = this.buildKeyResultPrompt(keyResult, companyProfile);
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();

      return this.parseAdviceResponse(text);
    } catch (error: any) {
      console.error('‚ùå Erreur Gemini API:', error?.message || error);

      if (error?.message?.includes('404') || error?.message?.includes('not found')) {
        throw new Error('Le mod√®le Gemini AI n\'est pas disponible. Veuillez v√©rifier votre configuration API.');
      } else if (error?.message?.includes('API key')) {
        throw new Error('Cl√© API Gemini invalide. Veuillez v√©rifier votre configuration.');
      } else {
        throw new Error(`Erreur lors de l'appel √† l'API Gemini : ${error?.message || 'Erreur inconnue'}`);
      }
    }
  }

  // G√©n√©rer des questions contextuelles sur l'entreprise
  public async generateCompanyQuestions(
    existingProfile?: Partial<CompanyProfile>
  ): Promise<string[]> {
    if (!this.isAvailable()) {
      throw new Error('L\'API Gemini n\'est pas configur√©e. Veuillez ajouter votre cl√© API dans le fichier .env.local');
    }

    try {
      const prompt = this.buildCompanyQuestionsPrompt(existingProfile);
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();

      return this.parseQuestionsResponse(text);
    } catch (error: any) {
      console.error('‚ùå Erreur Gemini API:', error?.message || error);

      if (error?.message?.includes('404') || error?.message?.includes('not found')) {
        throw new Error('Le mod√®le Gemini AI n\'est pas disponible. Veuillez v√©rifier votre configuration API.');
      } else if (error?.message?.includes('API key')) {
        throw new Error('Cl√© API Gemini invalide. Veuillez v√©rifier votre configuration.');
      } else {
        throw new Error(`Erreur lors de l'appel √† l'API Gemini : ${error?.message || 'Erreur inconnue'}`);
      }
    }
  }

  // Construire le prompt pour les ambitions
  private buildAmbitionPrompt(ambition: Partial<Ambition>, companyProfile?: CompanyProfile): string {
    let prompt = `En tant qu'expert en strat√©gie d'entreprise et coach en OKR, analysez cette ambition et donnez EXACTEMENT 5 conseils concrets pour l'am√©liorer.

Ambition : "${ambition.title || 'Non d√©finie'}"
Description : "${ambition.description || 'Non d√©finie'}"
Cat√©gorie : ${ambition.category || 'Non d√©finie'}`;

    if (companyProfile) {
      prompt += `

Contexte entreprise :
- Nom : ${companyProfile.name}
- Secteur : ${companyProfile.industry}
- Taille : ${companyProfile.size}
- Stade : ${companyProfile.stage}
- D√©fis principaux : ${companyProfile.mainChallenges?.join(', ') || 'Non d√©finis'}
- March√© cible : ${companyProfile.targetMarket || 'Non d√©fini'}`;
    }

    prompt += `

FORMAT DE R√âPONSE OBLIGATOIRE :
R√©pondez UNIQUEMENT avec une liste num√©rot√©e de 5 conseils, sans introduction ni conclusion.
Chaque conseil doit suivre ce format exact :

1. **[Titre du conseil]** : [Action concr√®te en 1-2 phrases maximum]
2. **[Titre du conseil]** : [Action concr√®te en 1-2 phrases maximum]
...

Concentrez-vous sur :
- La clart√© et la mesurabilit√© de l'ambition
- L'alignement avec le contexte business
- La faisabilit√© et les risques
- Les m√©triques de succ√®s
- Les √©tapes cl√©s pour l'atteindre

NE PAS inclure d'analyse pr√©liminaire, de justification d√©taill√©e ou de conclusion. UNIQUEMENT les 5 conseils au format demand√©.`;

    return prompt;
  }

  // Construire le prompt pour les r√©sultats cl√©s
  private buildKeyResultPrompt(keyResult: Partial<KeyResult>, companyProfile?: CompanyProfile): string {
    let prompt = `En tant qu'expert en OKR, analysez ce r√©sultat cl√© selon les crit√®res SMART et donnez 3-5 conseils d'am√©lioration :

R√©sultat cl√© : "${keyResult.title || 'Non d√©fini'}"
Description : "${keyResult.description || 'Non d√©finie'}"
Valeur cible : ${keyResult.target || 'Non d√©finie'}
Unit√© : ${keyResult.unit || 'Non d√©finie'}
√âch√©ance : ${keyResult.deadline ? new Date(keyResult.deadline).toLocaleDateString() : 'Non d√©finie'}`;

    if (companyProfile) {
      prompt += `

Contexte entreprise :
- Secteur : ${companyProfile.industry}
- Taille : ${companyProfile.size}
- Stade : ${companyProfile.stage}`;
    }

    prompt += `

√âvaluez selon les crit√®res SMART et donnez des conseils pour :
1. Sp√©cificit√© (Specific)
2. Mesurabilit√© (Measurable) 
3. Atteignabilit√© (Achievable)
4. Pertinence (Relevant)
5. Temporalit√© (Time-bound)

R√©pondez sous forme de liste num√©rot√©e avec des conseils concrets.`;

    return prompt;
  }

  // Construire le prompt pour les questions sur l'entreprise
  private buildCompanyQuestionsPrompt(existingProfile?: Partial<CompanyProfile>): string {
    let prompt = `En tant qu'expert en strat√©gie d'entreprise, g√©n√©rez 5 questions pertinentes pour mieux comprendre le contexte business d'un entrepreneur.`;

    if (existingProfile) {
      prompt += `

Informations d√©j√† connues :
- Nom : ${existingProfile.name || 'Non d√©fini'}
- Secteur : ${existingProfile.industry || 'Non d√©fini'}
- Taille : ${existingProfile.size || 'Non d√©finie'}
- Stade : ${existingProfile.stage || 'Non d√©fini'}
- D√©fis : ${existingProfile.mainChallenges?.join(', ') || 'Non d√©finis'}

G√©n√©rez des questions compl√©mentaires qui ne r√©p√®tent pas ces informations.`;
    }

    prompt += `

Les questions doivent √™tre :
1. Ouvertes et engageantes
2. Orient√©es business et strat√©gie
3. Utiles pour personnaliser les conseils OKR
4. Adapt√©es au contexte entrepreneurial fran√ßais
5. Formul√©es de mani√®re professionnelle mais accessible

R√©pondez uniquement avec une liste num√©rot√©e de 5 questions, sans introduction ni conclusion.`;

    return prompt;
  }

  // Parser la r√©ponse pour extraire les conseils
  private parseAdviceResponse(text: string): string[] {
    const advice: string[] = [];

    // Diviser le texte en lignes et chercher les conseils num√©rot√©s
    const lines = text.split('\n');
    let currentAdvice = '';
    let currentTitle = '';

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();

      // D√©tecter le d√©but d'un nouveau conseil : "1. **Titre** : Description"
      const adviceMatch = line.match(/^(\d+)\.\s+\*\*(.+?)\*\*\s*:\s*(.*)$/);

      if (adviceMatch) {
        // Sauvegarder le conseil pr√©c√©dent s'il existe
        if (currentTitle && currentAdvice) {
          advice.push(`${currentTitle} : ${currentAdvice}`);
        }

        // Commencer un nouveau conseil
        currentTitle = adviceMatch[2].trim();
        currentAdvice = adviceMatch[3].trim();
      } else if (currentTitle && line && !line.match(/^\d+\./)) {
        // Continuer le conseil actuel (ligne de suite)
        currentAdvice += ' ' + line;
      }
    }

    // Ajouter le dernier conseil
    if (currentTitle && currentAdvice) {
      // Nettoyer et limiter la longueur
      let cleanAdvice = currentAdvice
        .replace(/\s+/g, ' ')
        .trim();

      if (cleanAdvice.length > 250) {
        cleanAdvice = cleanAdvice.substring(0, 250) + '...';
      }

      advice.push(`${currentTitle} : ${cleanAdvice}`);
    }

    // Si aucun conseil structur√© n'est trouv√©, chercher les lignes num√©rot√©es simples
    if (advice.length === 0) {
      for (const line of lines) {
        if (/^\d+\./.test(line.trim())) {
          const cleaned = line.trim()
            .replace(/^\d+\.\s*/, '')
            .replace(/\*\*/g, '');

          // Limiter la longueur
          if (cleaned.length > 250) {
            advice.push(cleaned.substring(0, 250) + '...');
          } else {
            advice.push(cleaned);
          }
        }
      }
    }

    return advice.length > 0 ? advice : [text.trim()];
  }

  // Parser la r√©ponse pour extraire les questions
  private parseQuestionsResponse(text: string): string[] {
    const lines = text.split('\n').filter(line => line.trim());
    const questions: string[] = [];
    
    for (const line of lines) {
      if (/^\d+\./.test(line.trim()) || line.includes('?')) {
        questions.push(line.trim().replace(/^\d+\.\s*/, ''));
      }
    }
    
    return questions.length > 0 ? questions : [text.trim()];
  }

  // Note: Les m√©thodes fallback ont √©t√© supprim√©es
  // L'application affiche maintenant des messages d'erreur clairs si l'API n'est pas disponible
}

// Instance singleton
export const geminiService = GeminiService.getInstance();
